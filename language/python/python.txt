



# 指定执行版本：解决多版本编译器问题
#! /usr/bin/env python2
#! /usr/bin/env python3

# 指定编码格式：解决中文注释报错问题
# -*- coding: utf-8 -*-
# encoding: utf-8



# 文件格式：不同系统对应不同的换行符
:set fileformat——dos|unix
Line Separators——CRLF|LF


--------------------------------------------------------------------------------------------------


# 代码格式
# python中使用代码缩进形式代替C语言和java中的{}
# java使用驼峰命名，类名大驼峰（首字母大写），方法名小驼峰（首字母小写）
# python类名大驼峰，方法名中单词以下划线分隔（方法名也有按小驼峰命名的）


代码折行（python同shell）
name = func(data = data, \
    xxx = xxx, yyy = yyy)


一行多句使用;隔开
s = 'str'; print(s)


--------------------------------------------------------------------------------------------------

_：用于临时变量指无意义，在REPL中使用返回上一表达式结果
var_：用于解决命名冲突问题(与关键字冲突)
_var：用于保护变量(使用通配符导入调用方法无效)
__var：用于私有变量（名称改写）
__var__：用于魔术方法（内置函数）


__file__:源码脚步文件名
__name__:程序运行模块名


if __name__ == '__main__':
    """启动入口"""
    pass





--------------------------------------------------------------------------------------------------
三目运算符
三元表达式

result = true_value if flag else false_value


列表表达式
to_list = [expression for i in from_list]


--------------------------------------------------------------------------------------------------

Iterable -> Iterator -> Generator

0.可迭代的对象(Iterable)
class Iterable:
    """可迭代的对象:实现__iter__方法"""

    def __iter__():

        pass




1.迭代器(Iterator)
class Iterator:
    """迭代器：实现__iter__或__next__方法"""

    def __iter__():

        pass

    def __next__():

        pass

    pass

iter函数
iter(tuple) tuple_iterator
iter(list)  list_iterator
iter(set)   set_iterator

iter(dict)  dict_keyiterator

2.生成器(Generator)
使用yield替代return

生成器函数
import itertools


生成器表达式 = (expression from item in collection if condition)


3.序列

字符串

元组，列表，集合

元组解析式 = (expression from item in collection if condition)
列表解析式 = [expression from item in collection if condition]
集合解析式 = {expression from item in collection if condition}


4.字典

字典解析式 = {key:value from item in collection if condition}

--------------------------------------------------------------------------------------------------

动态代码，拼接语句

eval:执行表达式
exec:执行代码块

--------------------------------------------------------------------------------------------------
lambda表达式 -> 匿名函数

def func(x):
    return expression(x)

func = lambda x: expression(x)



map(lambda)
filter(lambda)


--------------------------------------------------------------------------------------------------
装饰器：注解

可被调用对象callable:函数，实现__call__方法的类，偏函数functools.partial

装饰器参数：元组*args和字典**kwargs

多个装饰器执行顺序：从下到上

1.函数装饰器

import functools

# wrapper.__name__ = func.__name__

1.1.无参数函数装饰器

def anno(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):

        return func(*args, **kwargs)

    return wrapper


1.2.带参数函数装饰器
def anno(param):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):

            return func(*args, **kwargs)

        return wrapper

    return decorator


2.类装饰器：实现__init__和__call__方法


2.1.无参数类装饰器
Class Anno(object):
    def __init__(self, func):
        self.func = func
        pass

    def __call__(self, *args, **kwargs):

        return self.func(*args, **kwargs)


2.2.带参数类装饰器
Class Anno(object):
    def __init__(self):

        pass

    def __call__(self, func):
        def wrapper(*args, **kwargs):

            return func(*args, **kwargs)

        return wrapper




--------------------------------------------------------------------------------------------------



python中*或**的多重含义

函数参数*args, **kwargs


*args:非键值对集合

args = (value1, value2,)
args = [value1, value2,]
args = {value1, value2,}
func(*args)

func(value1, value2,)

**kwargs:键值对
kwargs = {key1:value1, key2:value2,}
func(**kwargs)

func(key1=value1, key2=value2)



定义函数


调用函数


zip(iter):
- Python2将元素转成元组，整体组成列表
- Python3将元素转成元组，整体组成对象，对象可转列表

以多个参数的维度的最小值为长度，取每个参数一个元素组成一个元组

zip(*iter)=iter
序列解包："*表达式"只支持Python3，不支持Python2
使用"*表达式"获取任意长度的Iterable对象中某些固定模式数据
"*表达式"可以位于第一个位置、最后一个位置或中间任意的位置

1.算数运算
    *   代表乘法
    **  代表乘方

2.函数形参
    *args 表示多个无名参数，它本质是一个 tuple
    **kwargs 表示多个带名参数，它本质上是一个 dict

3.函数实参
    对元组和字典进行解引用

4.序列解包
    只有*，没有**；只支持Python3，不支持Python2

--------------------------------------------------------------------------------------------------

import json

处理json字符串
string = json.dumps(object)
object = json.loads(string)

处理json文件
json.dump(string, file)
string = json.load(file)

python	            json
--------------------------
dict	            object
list, tuple	        array
str, unicode	    string
int, long, float	number
True	            true
False	            false
None	            null


json	            python
--------------------------
object	            dict
array	            list
string	            unicode
number(int)	        int, long
number(real)	    float
true	            True
false	            False
null	            None

restful接口格式化输出json
curl http://xxx | python -m json.tool




--------------------------------------------------------------------------------------------------

Python Virtual Machine

python虚拟机