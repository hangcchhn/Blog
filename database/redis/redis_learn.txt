



redis（ <= 5.x）是单线程程序，除此之外nginx和node.js也是单线程程序，这些都是服务器高性能的典范

redis所有数据都存在内存中

redis所有运算都是内存级别的
对于时间复杂度为O(n)级别的指令要谨慎使用

多路复用：事件轮询


现代OS提供的多路复用API:select(unix),epoll(linux),kqueue(maxos)
最简单的事件循环API就是select函数
参数是读写描述符read_dfs&write_dfs和超时时间timeout，返回对应的可读写的事件
通过事件循环API同时处理多个描述符的读写事件就是多路复用API

指令队列
响应队列
定时任务

--------------------------------------------------------------------------------------------------


RESP(Redis Serialization Protocol)：redis序列化协议

五种最小单元类型，单元结束时统一加上换行符“\r\n”
1.单行字符串以“+”符号开头
2.多行字符串以“$”符号开头，后跟字符串的长度
3.整数值以“:”符号开头，后跟整数的字符串形式
4.错误消息以“-”符号开头
5.数组以“*”符号开业，后跟数组的长度

空null用多行字符串形式表示，不过字符串长度定为-1：$-1\r\n

空字符串
用单行字符串形式表示：+\r\n
用多行字符串形式表示：$0\r\n\r\n


--------------------------------------------------------------------------------------------------

持久化


1.快照rdb(redis database backup)
单次的全量备份
内存数据的二进制序列化形式
存储紧凑

redis使用OS(Operating System)的多进程COW(Copy On Write)机制实现rdb快照持久化


2.日志aof(append only file)
连续的增量备份
内存数据的修改指令记录
长时间运行日志庞大
重启时需要将指令重放
重放是按顺序执行所有指令


日志文件存储的是顺序指令序列，
只存储对内存进行修改的指令记录

redis是先执行指令再存储日志
hbase是先存储日志再执行指令

linux系统的glibc服务提供了fsync函数
可以将指定文件的内容强制从内核缓冲写到磁盘

fsync函数可以保证aof日志的完整性
fsync函数的磁盘io操作比较耗时
生产环境建议redis每秒调用一次fsync操作


redis.conf:
# 要配置随时保存缓存数据快照的功能
# 就不能适当的监控和持久化到磁盘上
stop-writes-on-bgsave-error no

redis-cli:
# rdb快照文件
# 前台运行保持快照文件
save
# 后台运行保持快照文件
bgsave

# aof日志文件
# 重新序列化操作指令后，追加到新的日志中，最后替换旧的日志文件
bgrewriteaof


redis ( >= 4.x ) 混合持久化
将rdb快照和aof日志存在一起
此时aof日志不再是全量的，而是增量的
记录的是rdb快照之后的修改内存指令序列
redis重启时是先加载rdb快照再重放增量的aof日志

--------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------

数据结构：数据类型底层实现

哈希表：类似一个数组，每个元素称为哈希桶，哈希桶存储键值对数据

哈希桶由多个entry构成，entry由*next指针，*key指针和*value指针构成

string,hash,set底层实现使用哈希表
时间复杂度O(1)

为了实现键到值的快速访问：redis使用一个哈希表存储所有的键值对数据


哈希冲突：链式哈希

重哈希：redis默认使用两个全局哈希表交替进行扩容

渐进式重哈希：将大量的数据拷贝分摊到每次请求中


数组
双向链表
时间复杂度O(n)


压缩列表zl(Zip List)：类似一个数组
头部设定三个字段：zlbytes（总容量），zltail（尾部偏移量）和zllen（元素个数）
尾部设定一个字段：zlend（尾部指针）
首尾元素操作的时间复杂度是O(1)，其他元素操作的时间复杂度是O(n)

跳表：在链表的基础上，增加了多级索引
zset(sorted set)底层实现使用跳表
时间复杂度O(logn)


单个元素操作:hset,hset,hdel,
时间复杂度O(1)

多个元素操作:hmget,hmset,
时间复杂度O(m)

范围操作:hgetall,smembers,lrange,zrange
时间复杂度O(n)

redis >= 2.8.x
扫描操作:hscan,sscan,zscan

统计操作:llen,scard
时间复杂度O(1)

列表首尾增删元素(lpop,lpush,rpop,rpush)的时间复杂度是O(1)
